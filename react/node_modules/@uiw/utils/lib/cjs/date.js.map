{"version":3,"sources":["../../src/date.ts"],"names":["isLeapYear","year","solarMonthDays","month","day","getFirstDayOfWeek","Date","getDay","isSameDate","a","b","toISOString"],"mappings":";;;;;;;AAAA;;;;AAIO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAkB;AAC1C,MAAIA,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,GAAP,KAAe,CAArC,EAAwC,OAAO,IAAP,CAAxC,KACK,IAAIA,IAAI,GAAG,GAAP,KAAe,CAAnB,EAAsB,OAAO,IAAP;AAC3B,SAAO,KAAP;AACD,CAJM;AAMP;;;;;;;;;;AAMO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACD,IAAD,EAAeE,KAAf,EAAiC;AAC7D,MAAMC,GAAG,GAAGH,IAAI,IAAID,UAAU,CAACC,IAAD,CAAlB,GAA2B,EAA3B,GAAgC,EAA5C;AACA,SAAO,CAAC,EAAD,EAAKG,GAAL,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,EAA9C,EAAkDD,KAAK,GAAG,CAA1D,CAAP;AACD,CAHM;AAKP;;;;;;;;AAIO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACJ,IAAD,EAAeE,KAAf,EAAiC;AAChE,SAAO,IAAIG,IAAJ,WAAYL,IAAZ,cAAoBE,KAApB,OAA6B,CAA7B,GAAkCI,MAAlC,EAAP;AACD,CAFM;AAIP;;;;;;;;;;;AAOO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAUC,CAAV;AAAA,SACxBD,CAAC,CAACE,WAAF,OAAoBD,CAAC,CAACC,WAAF,EADI;AAAA,CAAnB","sourcesContent":["/**\n * Determine whether it is a leap year\n * @param {Number} year\n */\nexport const isLeapYear = (year: number) => {\n  if (year % 4 === 0 && year % 100 !== 0) return true;\n  else if (year % 400 === 0) return true;\n  return false;\n};\n\n/**\n * Get the sun moon, commonly known as the solar calendar month\n * By calculating the second month of the leap year, maybe `29` days\n * @param {Number} month\n * @param {Number} year\n */\nexport const solarMonthDays = (year: number, month: number) => {\n  const day = year && isLeapYear(year) ? 29 : 28;\n  return [31, day, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n};\n\n/**\n * The first day of the month is the day of the week.\n * @param {Date} date\n */\nexport const getFirstDayOfWeek = (year: number, month: number) => {\n  return new Date(`${year}/${month}/${1}`).getDay();\n};\n\n/**\n * Check if a date is the same as another date.\n * Use `Date.prototype.toISOString()` and strict equality checking (`===`) to check\n * if the first date is the same as the second one.\n * @param {Date} dateA\n * @param {Date} dateB\n */\nexport const isSameDate = (a: Date, b: Date) =>\n  a.toISOString() === b.toISOString();\n"]}